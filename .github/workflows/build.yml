# =============================================================================
# GitHub Actions Workflow: Build Noble templates
# =============================================================================
# Purpose:
#   This workflow automates the build process for Noble (Ubuntu 24.04) disk 
#   images targeting multiple architectures (x64 and aarch64). It handles:
#   1. Setting up QEMU for cross-architecture builds
#   2. Building the disk-tools container with rootfs tarballs
#   3. Creating bootable disk images for each architecture
#   4. Uploading built images and logs as artifacts
#
# Trigger:
#   Runs automatically on pushes to the main branch to ensure all changes
#   result in buildable images
# =============================================================================

name: Build Noble templates

on:
  push:
    branches: [ main ]  # Only trigger on pushes to main branch

# Job Configuration
# -----------------------------------------------------------------------------
jobs:
  build:
    # Use latest Ubuntu runner for best compatibility with Noble (24.04)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        # Ensure consistent shell behavior across steps
        shell: bash

    steps:  # Workflow steps executed sequentially
      # -----------------------------------------------------------------------
      # Step 1: Repository Checkout
      # -----------------------------------------------------------------------
      # Check out the repository code. This step is required before we can
      # access any of the repository files for building.
      # -----------------------------------------------------------------------
      - uses: actions/checkout@v4
      
      # -----------------------------------------------------------------------
      # Step 1.5: Run ShellCheck on all shell scripts
      # -----------------------------------------------------------------------
      # This step ensures all shell scripts follow best practices and don't
      # have potential bugs or issues.
      # -----------------------------------------------------------------------
      - name: Install ShellCheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
        
      - name: Run ShellCheck
        run: |
          echo "Running ShellCheck on all shell scripts..."
          
          # Make the script finder executable
          chmod +x hooks/find_shell_scripts.sh
          
          # Use our shared script finder to get a list of shell scripts
          SHELL_SCRIPTS=$(hooks/find_shell_scripts.sh)
          
          # Run ShellCheck on all shell scripts
          for script in $SHELL_SCRIPTS; do
            echo "Checking $script..."
            shellcheck -x "$script" || exit 1
          done

      # -----------------------------------------------------------------------
      # Step 2: QEMU Setup for Multi-architecture Support
      # -----------------------------------------------------------------------
      # This step enables building ARM64 binaries on x86_64 runners by:
      # 1. Installing QEMU user-mode emulation support
      # 2. Registering binfmt handlers to automatically use QEMU when needed
      # 3. This is crucial for chroot operations on ARM64 rootfs
      # -----------------------------------------------------------------------
      - name: Set up QEMU
        run: |
          # Update package list to ensure we get latest QEMU
          sudo apt-get update
          # Install QEMU user-mode emulation package
          sudo apt-get install -y qemu-user-static
          # Register binfmt handlers using the multiarch helper container
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # -----------------------------------------------------------------------
      # Step 3: Build Disk-tools Container Image
      # -----------------------------------------------------------------------
      # Creates a Docker image containing:
      # - Base utilities for disk manipulation and filesystem operations
      # - Pre-downloaded Ubuntu Noble rootfs tarballs for all architectures
      # - All necessary scripts for disk image creation
      # Note: --no-cache ensures we always get fresh rootfs tarballs
      # -----------------------------------------------------------------------
      - name: Build disk-tools image
        run: |
          docker build --no-cache \
            -t loop-lab-disktools \
            -f src/docker/Dockerfile src/docker

      # -----------------------------------------------------------------------
      # Step 4: Generate Bootable Disk Images
      # -----------------------------------------------------------------------
      # For each supported architecture (x64, aarch64):
      # 1. Creates a disk image with EFI System and root partitions
      # 2. Installs UEFI shell as fallback boot option
      # 3. Unpacks architecture-specific rootfs
      # 4. Configures bootloader and kernel
      # 
      # Uses arch_info.sh to determine supported architectures and their
      # specific configuration parameters
      # -----------------------------------------------------------------------
      - name: Build templates for all architectures
        run: |
          # Use our common build script that handles both CI and local builds
          # The script automatically detects GitHub Actions and adjusts parallelism
          bash hooks/build_all_arch.sh
          
          # Note: build_all_arch.sh handles:
          # - Proper cleanup of loop devices
          # - Resource-aware parallel/serial execution
          # - Comprehensive error handling and reporting
          # - Consistent logging across CI and local builds

      # -----------------------------------------------------------------------
      # Step 5: Upload Built Disk Images
      # -----------------------------------------------------------------------
      # Stores the generated disk images as workflow artifacts for:
      # - Download and testing
      # - Validation of build outputs
      # - Use in subsequent workflow steps or other workflows
      # -----------------------------------------------------------------------
      - name: Upload templates
        uses: actions/upload-artifact@v4
        with:
          name: noble-templates
          path: |
            # Upload both architecture variants
            template-x64.img
            template-aarch64.img

      # -----------------------------------------------------------------------
      # Step 6: Upload Build Logs
      # -----------------------------------------------------------------------
      # Captures the combined build log for debugging and audit purposes.
      # The 'if: always()' ensures logs are uploaded even if previous steps fail,
      # which is crucial for debugging failed builds.
      # -----------------------------------------------------------------------
      - name: Upload build log
        if: always()  # Upload logs even if the build fails
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: loop-lab.log
